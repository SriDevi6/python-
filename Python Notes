Underscore(_) is a unique character in Python.
Usage:
 1.Use In Interperter not in file
    -----------------------------
    _  is used to store the value of last expression 
    Python automatically stores the value of the last expression in the interpreter to a particular variable called "_."
 2. Ignoring Values
    -----------------------------
   Underscore(_) is also used to ignore the values. If you don't want to use specific values while unpacking, just assign that value to underscore(_).
   Ignoring means assigning the values to special variable underscore(_). We're assigning the values to underscore(_) 
   a, _, b = (1, 2, 3) # a = 1, b = 3
   print(a, b)
  ## ignoring multiple values
  ## *(variable) used to assign multiple value to a variable as list while unpacking
  ## it's called "Extended Unpacking", only available in Python 3.x
  a, *_, b = (7, 6, 5, 4, 3, 2, 1)
  print(a, b)
3. Use In Looping
   -----------------------------
  You can use underscore(_) as a variable in looping. See the examples below to get an idea.

  ## lopping ten times using _
  for _ in range(5):
      print(_)
      
 _ = 5
 while _ < 10:
    print(_, end = ' ') # default value of 'end' id '\n' in python. we're changing it to space
    _ += 1
    
   4.Naming Using Underscore(_)
   -----------------------------
Underscore(_) can be used to name variables, functions and classes, etc..,

Single Pre Underscore:- _variable
Signle Post Underscore:- variable_
Double Pre Underscores:- __variable
Double Pre and Post Underscores:- __variable__
single pre underscore 
--------------------
It doesn't stop you from accessing the single pre underscore variable.
But, single pre underscore effects the names that are imported from the module.
Python doesn't import the names which starts with a single pre underscore.
single_postunderscore
name_

Sometimes if you want to use Python Keywords as a variable, function or class names, you can use this convention for that.

You can avoid conflicts with the Python Keywords by adding an underscore at the end of the name which you want to use.



It depends on how you want to access the import when you refer to it.
from urllib import request
# access request directly.
mine = request()

import urllib.request
# used as urllib.request
mine = urllib.request()
